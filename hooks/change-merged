#!/usr/bin/python

import os
import sys
import argparse
import hipchat
from git import *
import ConfigParser

def log_args():
  """
    This function will write to the logfile all the details passed
    to this gerrit hook.
  """
  fo = open (os.environ['GERRIT_SITE'] + '/logs/change-merged.log', "a")
  data = "Args: " + str(sys.argv) + "\n"
  fo.write (data)
  fo.flush()
  fo.close()

def parse_args():
  """
    Parse the expected gerrit hook args
  """
  parser = argparse.ArgumentParser()
  parser.add_argument ("--change", help = "change ID of patch set")
  parser.add_argument ("--change-url", help = "URL of reivew")
  parser.add_argument ("--project", help = "Gerrit project of patch set")
  parser.add_argument ("--branch", help = "Git branch of patch set")
  parser.add_argument ("--topic", help = "Git Topic of branch of patch set")
  parser.add_argument ("--submitter", help = "Entity of patch set submitter")
  parser.add_argument ("--commit", help = "Git commit SHA1")
  return parser.parse_args()

def post_hipchat(tkn, room, msg):
  hipster = hipchat.HipChat (token=tkn)
  print hipster.message_room (room, 'GERRIT', msg)

def get_commit_msg(args):
  repo = Repo (os.environ['GIT_DIR'])
  commit = repo.commit (args.commit)
  return commit.message[0:commit.message.find("\n")]

def format_msg(args, msg):
  post = "Change Merged:\n" + \
         "  Change URL: " + args.change_url + "\n" + \
         "  Project: " + args.project + "\n" + \
         "  Submitter:: " + args.submitter + "\n" + \
         "  Commit SHA1: " + args.commit + "\n" + msg + "\n"
  return post

def get_config():
  config = ConfigParser.SafeConfigParser()
  config.read (os.environ['GERRIT_SITE'] + '/etc/hipchat-hook.cfg')
  if not config.has_section ('default'):
    raise ConfigParser.NoSectionError ("no DEFAULT section found")
  if not config.has_option ('default', 'room'):
    raise ConfigParser.NoOptionError ("No option ROOM in DEFAULT section")
  if not config.has_option ('default', 'apiToken'):
    raise ConfigParser.NoOptionError ("No option apiToken found")
  return config

def get_room(config, project):
  if config.has_option ('project.rooms', project):
    return config.get ('project.rooms', project)
  else:
    return config.get ('default', 'room')

def get_token(config):
  return config.get ('default', 'apiToken')

if __name__ == '__main__':
  log_args()
  config = get_config()
  args = parse_args()
  room = get_room (config, args.project)
  token = get_token (config)
  msg = get_commit_msg(args)
  msg = format_msg (args, msg)
  post_hipchat(token, room, msg)
